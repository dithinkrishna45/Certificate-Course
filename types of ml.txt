Supervised Learning - Learning with Teacher


print(data.info())
print(data.isnull().sum())
data = data.drop(columns=['CustomerID'])  # Drop irrelevant column

# Encode categorical variables
data = pd.get_dummies(data, columns=['Gender'], drop_first=True)
print(data.head())

# 3. Exploratory Data Analysis (EDA)
import matplotlib.pyplot as plt
import seaborn as sns
plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
sns.histplot(data['Age'], bins=10, kde=True)
plt.title('Age Distribution')
plt.subplot(1, 2, 2)
sns.histplot(data['Annual Income (k$)'], bins=10, kde=True)
plt.title('Annual Income Distribution')
plt.tight_layout()
plt.show()
plt.figure(figsize=(5, 5))
sns.scatterplot(x='Annual Income (k$)', y='Spending Score (1-100)', hue='Gender', data=data)
plt.title('Income vs Spending Score')
plt.show()
# 4. Feature Selection
X = data.drop(columns=['Spending Score (1-100)'])
y = data['Spending Score (1-100)']
print(X.head())
print(y.head())
# 5. Model Training
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)
# 6. Model Evaluation
y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f'Mean Squared Error: {mse}')
print(f'R^2 Score: {r2}')
# Feature Importance
importances = model.feature_importances_
feature_names = X.columns
importance_df = pd.DataFrame({'Feature': feature_names, 'Importance': importances})
importance_df = importance_df.sort_values(by='Importance', ascending=False)
plt.figure(figsize=(10, 6))
sns.barplot(x='Importance', y='Feature', data=importance_df)
plt.title('Feature Importance')
plt.show()

# 7. Conclusion
# The RandomForestRegressor model provides insights into customer spending behavior based on age, income, and gender.   
# Further tuning and validation can enhance model performance.